{"remainingRequest":"C:\\xampp2\\htdocs\\w\\m\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp2\\htdocs\\w\\m\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp2\\htdocs\\w\\m\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp2\\htdocs\\w\\m\\src\\views\\products\\motocycles.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\xampp2\\htdocs\\w\\m\\src\\views\\products\\motocycles.vue","mtime":1632212374421},{"path":"C:\\xampp2\\htdocs\\w\\m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632121223066},{"path":"C:\\xampp2\\htdocs\\w\\m\\node_modules\\babel-loader\\lib\\index.js","mtime":1632121221201},{"path":"C:\\xampp2\\htdocs\\w\\m\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1632121223066},{"path":"C:\\xampp2\\htdocs\\w\\m\\node_modules\\vue-loader\\lib\\index.js","mtime":1632121257597}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L3hhbXBwMi9odGRvY3Mvdy9tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IG1saXN0IGZyb20gIi4vbGlzdC52dWUiOwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgeyBtZGJDb250YWluZXIsIG1kYkNvbCwgbWRiUm93LCBtZGJFZGdlSGVhZGVyLCBtZGJDYXJkQm9keSB9IGZyb20gJ21kYnZ1ZSc7IC8vIGltcG9ydCBkYXRhIGZyb20gIi4vcG9zdHMuanNvbiIKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICAvLyBMYXlvdXQsCiAgICAvLyBOZXdzRmlsdGVyLAogICAgbWxpc3Q6IG1saXN0LAogICAgbWRiQ29udGFpbmVyOiBtZGJDb250YWluZXIsCiAgICBtZGJDb2w6IG1kYkNvbCwKICAgIG1kYlJvdzogbWRiUm93LAogICAgbWRiRWRnZUhlYWRlcjogbWRiRWRnZUhlYWRlciwKICAgIG1kYkNhcmRCb2R5OiBtZGJDYXJkQm9keQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHByb2R1Y3RzOiBbXQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgZXh0cmFjdGluZyBhIG5lc3RlZCBpbWFnZSBvYmplY3QKICAgIGZldGNoTmV3czogZnVuY3Rpb24gZmV0Y2hOZXdzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgbXVybCwgbURhdGE7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbXVybCA9IF90aGlzLiRzdG9yZS5zdGF0ZS5tVXJsOwogICAgICAgICAgICAgICAgbURhdGEgPSB7CiAgICAgICAgICAgICAgICAgIG5tOiAicGV0ZXIiIC8vIHBhc3M6dGhpcy5wYXNzCgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGF4aW9zKHsKICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgICAgICAgIC8vIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3QvbncvdmFwL3JlZ0FwaS5waHA/YXBpY2FsbD1zaWdudXAnCiAgICAgICAgICAgICAgICAgIHVybDogbXVybCArICdhcGkucGhwP2FwaWNhbGw9YV9tJywKICAgICAgICAgICAgICAgICAgZGF0YTogbURhdGEsCiAgICAgICAgICAgICAgICAgIGNvbmZpZzogewogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgICAgdmFyIG15RGF0YSA9IHJlc3BvbnNlLmRhdGEuZGF0YTsgLy8gY29uc29sZS5sb2coInJlc3BvbnNlOiAiK0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7CgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVzcG9uc2UxOiAiICsgSlNPTi5zdHJpbmdpZnkobXlEYXRhKSk7CgogICAgICAgICAgICAgICAgICBpZiAocmVzdWx0cy52YWwgPT0gMikgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG15RGF0YSk7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJvZHVjdHMgPSBteURhdGEubWFwKGZ1bmN0aW9uIChwb3N0KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBpZDogcG9zdC5wcm8ucGlkLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwb3N0LnByby5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBpbWFnZXM6IHBvc3QucHJvLmltZywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHBvc3QucHJvLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBwb3N0LnByby50eXBlLAogICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogcG9zdC5wcm8ucHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGltOiBwb3N0LmltIC8vIGNyZWF0ZWRfYXQ6IHBvc3QubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlZF9hdDogcG9zdC5uYW1lCgogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIC8vaGFuZGxlIGVycm9yCiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJlcnJvciIgKyByZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9KTsgLy8gdHJ5IHsKICAgICAgICAgICAgICAgIC8vICAgY29uc3QgdXJsID0gImh0dHBzOi8vdGktcmVhY3QtdGVzdC5oZXJva3VhcHAuY29tL3VzZXJzIgogICAgICAgICAgICAgICAgLy8gICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldCh1cmwpCiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coIlNlcnZlciBFcnJvcjoiLCByZXNwb25zZS5kYXRhKQogICAgICAgICAgICAgICAgLy8gICBjb25zdCByZXN1bHRzID0gcmVzcG9uc2UuZGF0YQogICAgICAgICAgICAgICAgLy8gICB0aGlzLnBvc3RzID0gcmVzdWx0cy5tYXAocG9zdCA9PiAoewogICAgICAgICAgICAgICAgLy8gICAgIGlkOiBwb3N0LmlkLAogICAgICAgICAgICAgICAgLy8gICAgIG5hbWU6IHBvc3QubmFtZSwKICAgICAgICAgICAgICAgIC8vICAgICBvY2N1cGF0aW9uOiBwb3N0Lm9jY3VwYXRpb24sCiAgICAgICAgICAgICAgICAvLyAgICAgZW1haWw6IHBvc3QuZW1haWwsCiAgICAgICAgICAgICAgICAvLyAgICAgYmlvOiBwb3N0LmJpbywKICAgICAgICAgICAgICAgIC8vICAgICBjcmVhdGVkX2F0OiBwb3N0LmNyZWF0ZWRfYXQsCiAgICAgICAgICAgICAgICAvLyAgICAgdXBkYXRlZF9hdDogcG9zdC51cGRhdGVkX2F0CiAgICAgICAgICAgICAgICAvLyAgIH0pKQogICAgICAgICAgICAgICAgLy8gfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAvLyAgIGlmIChlcnIucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIC8vICAgICAvLyBjbGllbnQgcmVjZWl2ZWQgYW4gZXJyb3IgcmVzcG9uc2UgKDV4eCwgNHh4KQogICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCJTZXJ2ZXIgRXJyb3I6IiwgZXJyKQogICAgICAgICAgICAgICAgLy8gICB9IGVsc2UgaWYgKGVyci5yZXF1ZXN0KSB7CiAgICAgICAgICAgICAgICAvLyAgICAgLy8gY2xpZW50IG5ldmVyIHJlY2VpdmVkIGEgcmVzcG9uc2UsIG9yIHJlcXVlc3QgbmV2ZXIgbGVmdAogICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCJOZXR3b3JrIEVycm9yOiIsIGVycikKICAgICAgICAgICAgICAgIC8vICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygiQ2xpZW50IEVycm9yOiIsIGVycikKICAgICAgICAgICAgICAgIC8vICAgfQogICAgICAgICAgICAgICAgLy8gfQoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5mZXRjaE5ld3MoKTsKICB9Cn07"},{"version":3,"sources":["motocycles.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAA,KAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,YAAA,EAAA,MAAA,EAAA,MAAA,EAAA,aAAA,EAAA,WAAA,QAAA,QAAA,C,CACA;;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA;AACA;AACA,IAAA,KAAA,EAAA,KAHA;AAIA,IAAA,YAAA,EAAA,YAJA;AAKA,IAAA,MAAA,EAAA,MALA;AAMA,IAAA,MAAA,EAAA,MANA;AAOA,IAAA,aAAA,EAAA,aAPA;AASA,IAAA,WAAA,EAAA;AATA,GADA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA;AACA,MAAA,QAAA,EAAA;AADA,KAAA;AAGA,GAlBA;AAmBA,EAAA,OAAA,EAAA;AACA;AAEA,IAAA,SAHA,uBAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,gBAAA,IAFA,GAEA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAFA;AAGA,gBAAA,KAHA,GAGA;AACA,kBAAA,EAAA,EAAA,OADA,CAEA;;AAFA,iBAHA;AAQA,gBAAA,KAAA,CAAA;AACA,kBAAA,MAAA,EAAA,MADA;AAEA;AACA,kBAAA,GAAA,EAAA,IAAA,GAAA,qBAHA;AAIA,kBAAA,IAAA,EAAA,KAJA;AAKA,kBAAA,MAAA,EAAA;AAAA,oBAAA,OAAA,EAAA;AAAA,sCAAA;AAAA;AAAA;AALA,iBAAA,CAAA,CAOA,IAPA,CAOA,UAAA,QAAA,EAAA;AACA,sBAAA,OAAA,GAAA,QAAA,CAAA,IAAA;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAFA,CAGA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA;;AAEA,sBAAA,OAAA,CAAA,GAAA,IAAA,CAAA,EAAA;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,oBAAA,KAAA,CAAA,QAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,6BAAA;AAEA,wBAAA,EAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAFA;AAGA,wBAAA,IAAA,EAAA,IAAA,CAAA,GAAA,CAAA,IAHA;AAIA,wBAAA,MAAA,EAAA,IAAA,CAAA,GAAA,CAAA,GAJA;AAKA,wBAAA,WAAA,EAAA,IAAA,CAAA,GAAA,CAAA,WALA;AAMA,wBAAA,IAAA,EAAA,IAAA,CAAA,GAAA,CAAA,IANA;AAOA,wBAAA,KAAA,EAAA,IAAA,CAAA,GAAA,CAAA,KAPA;AAQA,wBAAA,EAAA,EAAA,IAAA,CAAA,EARA,CASA;AACA;;AAVA,uBAAA;AAAA,qBAAA,CAAA;AAaA;AAGA,iBA/BA,EAgCA,KAhCA,CAgCA,UAAA,QAAA,EAAA;AACA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,UAAA,QAAA;AACA,iBAnCA,EARA,CA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEA;AA1EA,GAnBA;AA+FA,EAAA,OA/FA,qBA+FA;AACA,SAAA,SAAA;AACA;AAjGA,CAAA","sourcesContent":["<template>\r\n  <Layout>\r\n    <div style=\"margin-top: -15px; overflow-x: ;\">\r\n       <mdb-edge-header color=\"\" style=\"background-color: #080e35 \">\r\n        <div class=\"home-page-background\"></div>\r\n      </mdb-edge-header>\r\n           \r\n    <mdb-container class=\"free-bird\">\r\n        <mdb-row>\r\n          <mdb-col md=\"10\" class=\"mx-auto white z-depth-1 py-2 px-2\">\r\n            <mdb-card-body>\r\n              <h2 class=\"pb-4\"><strong>Motocycles</strong></h2>\r\n              \r\n           \r\n            </mdb-card-body>\r\n          </mdb-col>\r\n        </mdb-row>\r\n      </mdb-container>\r\n  \r\n     </div>\r\n    <mlist :posts=\"products\" />\r\n   \r\n  </Layout>\r\n</template>\r\n\r\n<script>\r\nimport mlist from \"./list.vue\"\r\nimport axios from \"axios\"\r\nimport { mdbContainer, mdbCol, mdbRow,  mdbEdgeHeader,  mdbCardBody } from 'mdbvue';\r\n// import data from \"./posts.json\"\r\n\r\nexport default {\r\n  components: {\r\n    // Layout,\r\n    // NewsFilter,\r\n    mlist,\r\n    mdbContainer,\r\n    mdbCol,\r\n    mdbRow,\r\n    mdbEdgeHeader,\r\n    \r\n    mdbCardBody\r\n  },\r\n  \r\n\r\n  data() {\r\n    return {\r\n      products: [],\r\n    }\r\n  },\r\n  methods: {\r\n    // Helper function for extracting a nested image object\r\n   \r\n    async fetchNews() {\r\n\r\n        var murl=this.$store.state.mUrl;\r\n       const mData = { \r\n    nm:\"peter\" ,\r\n    // pass:this.pass\r\n };\r\n    \r\naxios({\r\n          method: 'POST',\r\n          // url: 'http://localhost/nw/vap/regApi.php?apicall=signup'\r\n          url: murl+'api.php?apicall=a_m',\r\n          data: mData,\r\n          config: { headers: {'Content-Type': 'multipart/form-data' }}\r\n      })\r\n      .then((response) => {\r\n         const results = response.data\r\n         const myData = response.data.data\r\n        // console.log(\"response: \"+JSON.stringify(response));\r\n        console.log(\"response1: \"+ JSON.stringify(myData));\r\n        \r\n        if(results.val==2){\r\n          console.log(myData)\r\n            this.products = myData.map(post => ({\r\n            \r\n          id: post.pro.pid,\r\n          name: post.pro.name,\r\n          images: post.pro.img,\r\n          description: post.pro.description,\r\n          type: post.pro.type,\r\n          price: post.pro.price,\r\n          im: post.im\r\n          // created_at: post.name,\r\n          // updated_at: post.name\r\n         \r\n        }))\r\n        }\r\n       \r\n\r\n      })\r\n      .catch(function (response) {\r\n          //handle error\r\n          console.log(\"error\"+response)\r\n      });\r\n\r\n      // try {\r\n      //   const url = \"https://ti-react-test.herokuapp.com/users\"\r\n      //   const response = await axios.get(url)\r\n      //     console.log(\"Server Error:\", response.data)\r\n      //   const results = response.data\r\n      //   this.posts = results.map(post => ({\r\n      //     id: post.id,\r\n      //     name: post.name,\r\n      //     occupation: post.occupation,\r\n      //     email: post.email,\r\n      //     bio: post.bio,\r\n      //     created_at: post.created_at,\r\n      //     updated_at: post.updated_at\r\n         \r\n      //   }))\r\n      // } catch (err) {\r\n      //   if (err.response) {\r\n      //     // client received an error response (5xx, 4xx)\r\n      //     console.log(\"Server Error:\", err)\r\n      //   } else if (err.request) {\r\n      //     // client never received a response, or request never left\r\n      //     console.log(\"Network Error:\", err)\r\n      //   } else {\r\n      //     console.log(\"Client Error:\", err)\r\n      //   }\r\n      // }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchNews()\r\n  },\r\n\r\n}\r\n</script>"],"sourceRoot":"src/views/products"}]}