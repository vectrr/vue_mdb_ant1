{"remainingRequest":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\src\\views\\products\\motocycles.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\src\\views\\products\\motocycles.vue","mtime":1631733716839},{"path":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\w\\15\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6L3dhbXA2NC93d3cvdy8xNS92dWVfbWRiX2FudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBtbGlzdCBmcm9tICIuL2xpc3QudnVlIjsKaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IHsgbWRiQ29udGFpbmVyLCBtZGJDb2wsIG1kYlJvdywgbWRiRWRnZUhlYWRlciwgbWRiQ2FyZEJvZHkgfSBmcm9tICdtZGJ2dWUnOyAvLyBpbXBvcnQgZGF0YSBmcm9tICIuL3Bvc3RzLmpzb24iCgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgLy8gTGF5b3V0LAogICAgLy8gTmV3c0ZpbHRlciwKICAgIG1saXN0OiBtbGlzdCwKICAgIG1kYkNvbnRhaW5lcjogbWRiQ29udGFpbmVyLAogICAgbWRiQ29sOiBtZGJDb2wsCiAgICBtZGJSb3c6IG1kYlJvdywKICAgIG1kYkVkZ2VIZWFkZXI6IG1kYkVkZ2VIZWFkZXIsCiAgICBtZGJDYXJkQm9keTogbWRiQ2FyZEJvZHkKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwb3N0czogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGV4dHJhY3RpbmcgYSBuZXN0ZWQgaW1hZ2Ugb2JqZWN0CiAgICBmZXRjaE5ld3M6IGZ1bmN0aW9uIGZldGNoTmV3cygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIG11cmwsIG1EYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIG11cmwgPSBfdGhpcy4kc3RvcmUuc3RhdGUubVVybDsKICAgICAgICAgICAgICAgIG1EYXRhID0gewogICAgICAgICAgICAgICAgICBubTogInBldGVyIiAvLyBwYXNzOnRoaXMucGFzcwoKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBheGlvcyh7CiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgICAvLyB1cmw6ICdodHRwOi8vbG9jYWxob3N0L253L3ZhcC9yZWdBcGkucGhwP2FwaWNhbGw9c2lnbnVwJwogICAgICAgICAgICAgICAgICB1cmw6IG11cmwgKyAnYXBpLnBocD9hcGljYWxsPWFfbScsCiAgICAgICAgICAgICAgICAgIGRhdGE6IG1EYXRhLAogICAgICAgICAgICAgICAgICBjb25maWc6IHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgICAgICAgIHZhciBteURhdGEgPSByZXNwb25zZS5kYXRhLmRhdGE7IC8vIGNvbnNvbGUubG9nKCJyZXNwb25zZTogIityZXNwb25zZSk7CgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVzcG9uc2UxOiAiICsgSlNPTi5zdHJpbmdpZnkobXlEYXRhKSk7CgogICAgICAgICAgICAgICAgICBpZiAocmVzdWx0cy52YWwgPT0gMikgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG15RGF0YSk7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9zdHMgPSBteURhdGEubWFwKGZ1bmN0aW9uIChwb3N0KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBpZDogcG9zdC5waWQsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHBvc3QubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgb2NjdXBhdGlvbjogcG9zdC5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogcG9zdC5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBiaW86IHBvc3QubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZF9hdDogcG9zdC5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkX2F0OiBwb3N0Lm5hbWUKICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAvL2hhbmRsZSBlcnJvcgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZXJyb3IiICsgcmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfSk7IC8vIHRyeSB7CiAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IHVybCA9ICJodHRwczovL3RpLXJlYWN0LXRlc3QuaGVyb2t1YXBwLmNvbS91c2VycyIKICAgICAgICAgICAgICAgIC8vICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsKQogICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCJTZXJ2ZXIgRXJyb3I6IiwgcmVzcG9uc2UuZGF0YSkKICAgICAgICAgICAgICAgIC8vICAgY29uc3QgcmVzdWx0cyA9IHJlc3BvbnNlLmRhdGEKICAgICAgICAgICAgICAgIC8vICAgdGhpcy5wb3N0cyA9IHJlc3VsdHMubWFwKHBvc3QgPT4gKHsKICAgICAgICAgICAgICAgIC8vICAgICBpZDogcG9zdC5pZCwKICAgICAgICAgICAgICAgIC8vICAgICBuYW1lOiBwb3N0Lm5hbWUsCiAgICAgICAgICAgICAgICAvLyAgICAgb2NjdXBhdGlvbjogcG9zdC5vY2N1cGF0aW9uLAogICAgICAgICAgICAgICAgLy8gICAgIGVtYWlsOiBwb3N0LmVtYWlsLAogICAgICAgICAgICAgICAgLy8gICAgIGJpbzogcG9zdC5iaW8sCiAgICAgICAgICAgICAgICAvLyAgICAgY3JlYXRlZF9hdDogcG9zdC5jcmVhdGVkX2F0LAogICAgICAgICAgICAgICAgLy8gICAgIHVwZGF0ZWRfYXQ6IHBvc3QudXBkYXRlZF9hdAogICAgICAgICAgICAgICAgLy8gICB9KSkKICAgICAgICAgICAgICAgIC8vIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgLy8gICBpZiAoZXJyLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAvLyAgICAgLy8gY2xpZW50IHJlY2VpdmVkIGFuIGVycm9yIHJlc3BvbnNlICg1eHgsIDR4eCkKICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygiU2VydmVyIEVycm9yOiIsIGVycikKICAgICAgICAgICAgICAgIC8vICAgfSBlbHNlIGlmIChlcnIucmVxdWVzdCkgewogICAgICAgICAgICAgICAgLy8gICAgIC8vIGNsaWVudCBuZXZlciByZWNlaXZlZCBhIHJlc3BvbnNlLCBvciByZXF1ZXN0IG5ldmVyIGxlZnQKICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygiTmV0d29yayBFcnJvcjoiLCBlcnIpCiAgICAgICAgICAgICAgICAvLyAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coIkNsaWVudCBFcnJvcjoiLCBlcnIpCiAgICAgICAgICAgICAgICAvLyAgIH0KICAgICAgICAgICAgICAgIC8vIH0KCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZmV0Y2hOZXdzKCk7CiAgfQp9Ow=="},{"version":3,"sources":["motocycles.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,OAAA,KAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,YAAA,EAAA,MAAA,EAAA,MAAA,EAAA,aAAA,EAAA,WAAA,QAAA,QAAA,C,CACA;;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA;AACA;AACA,IAAA,KAAA,EAAA,KAHA;AAIA,IAAA,YAAA,EAAA,YAJA;AAKA,IAAA,MAAA,EAAA,MALA;AAMA,IAAA,MAAA,EAAA,MANA;AAOA,IAAA,aAAA,EAAA,aAPA;AASA,IAAA,WAAA,EAAA;AATA,GADA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA;AACA,MAAA,KAAA,EAAA;AADA,KAAA;AAGA,GAlBA;AAmBA,EAAA,OAAA,EAAA;AACA;AAEA,IAAA,SAHA,uBAGA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,gBAAA,IAFA,GAEA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAFA;AAGA,gBAAA,KAHA,GAGA;AACA,kBAAA,EAAA,EAAA,OADA,CAEA;;AAFA,iBAHA;AAQA,gBAAA,KAAA,CAAA;AACA,kBAAA,MAAA,EAAA,MADA;AAEA;AACA,kBAAA,GAAA,EAAA,IAAA,GAAA,qBAHA;AAIA,kBAAA,IAAA,EAAA,KAJA;AAKA,kBAAA,MAAA,EAAA;AAAA,oBAAA,OAAA,EAAA;AAAA,sCAAA;AAAA;AAAA;AALA,iBAAA,CAAA,CAOA,IAPA,CAOA,UAAA,QAAA,EAAA;AACA,sBAAA,OAAA,GAAA,QAAA,CAAA,IAAA;AACA,sBAAA,MAAA,GAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAFA,CAGA;;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA;;AAEA,sBAAA,OAAA,CAAA,GAAA,IAAA,CAAA,EAAA;AACA,oBAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,oBAAA,KAAA,CAAA,KAAA,GAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,6BAAA;AAEA,wBAAA,EAAA,EAAA,IAAA,CAAA,GAFA;AAGA,wBAAA,IAAA,EAAA,IAAA,CAAA,IAHA;AAIA,wBAAA,UAAA,EAAA,IAAA,CAAA,IAJA;AAKA,wBAAA,KAAA,EAAA,IAAA,CAAA,IALA;AAMA,wBAAA,GAAA,EAAA,IAAA,CAAA,IANA;AAOA,wBAAA,UAAA,EAAA,IAAA,CAAA,IAPA;AAQA,wBAAA,UAAA,EAAA,IAAA,CAAA;AARA,uBAAA;AAAA,qBAAA,CAAA;AAWA;AAGA,iBA7BA,EA8BA,KA9BA,CA8BA,UAAA,QAAA,EAAA;AACA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,UAAA,QAAA;AACA,iBAjCA,EARA,CA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqEA;AAxEA,GAnBA;AA6FA,EAAA,OA7FA,qBA6FA;AACA,SAAA,SAAA;AACA;AA/FA,CAAA","sourcesContent":["<template>\r\n  <Layout>\r\n    <div style=\"margin-top: -15px; overflow-x: ;\">\r\n       <mdb-edge-header color=\"teal darken-2\">\r\n        <div class=\"home-page-background\"></div>\r\n      </mdb-edge-header>\r\n           \r\n    <mdb-container class=\"free-bird\">\r\n        <mdb-row>\r\n          <mdb-col md=\"10\" class=\"mx-auto white z-depth-1 py-2 px-2\">\r\n            <mdb-card-body>\r\n              <h2 class=\"pb-4\"><strong>Home page</strong></h2>\r\n              \r\n           \r\n            </mdb-card-body>\r\n          </mdb-col>\r\n        </mdb-row>\r\n      </mdb-container>\r\n  \r\n     </div>\r\n    <mlist :posts=\"posts\" />\r\n   \r\n  </Layout>\r\n</template>\r\n\r\n<script>\r\nimport mlist from \"./list.vue\"\r\nimport axios from \"axios\"\r\nimport { mdbContainer, mdbCol, mdbRow,  mdbEdgeHeader,  mdbCardBody } from 'mdbvue';\r\n// import data from \"./posts.json\"\r\n\r\nexport default {\r\n  components: {\r\n    // Layout,\r\n    // NewsFilter,\r\n    mlist,\r\n    mdbContainer,\r\n    mdbCol,\r\n    mdbRow,\r\n    mdbEdgeHeader,\r\n    \r\n    mdbCardBody\r\n  },\r\n  \r\n\r\n  data() {\r\n    return {\r\n      posts: [],\r\n    }\r\n  },\r\n  methods: {\r\n    // Helper function for extracting a nested image object\r\n   \r\n    async fetchNews() {\r\n\r\n        var murl=this.$store.state.mUrl;\r\n       const mData = { \r\n    nm:\"peter\" ,\r\n    // pass:this.pass\r\n };\r\n    \r\naxios({\r\n          method: 'POST',\r\n          // url: 'http://localhost/nw/vap/regApi.php?apicall=signup'\r\n          url: murl+'api.php?apicall=a_m',\r\n          data: mData,\r\n          config: { headers: {'Content-Type': 'multipart/form-data' }}\r\n      })\r\n      .then((response) => {\r\n         const results = response.data\r\n         const myData = response.data.data\r\n        // console.log(\"response: \"+response);\r\n        console.log(\"response1: \"+ JSON.stringify(myData));\r\n        \r\n        if(results.val==2){\r\n          console.log(myData)\r\n            this.posts = myData.map(post => ({\r\n            \r\n          id: post.pid,\r\n          name: post.name,\r\n          occupation: post.name,\r\n          email: post.name,\r\n          bio: post.name,\r\n          created_at: post.name,\r\n          updated_at: post.name\r\n         \r\n        }))\r\n        }\r\n       \r\n\r\n      })\r\n      .catch(function (response) {\r\n          //handle error\r\n          console.log(\"error\"+response)\r\n      });\r\n\r\n      // try {\r\n      //   const url = \"https://ti-react-test.herokuapp.com/users\"\r\n      //   const response = await axios.get(url)\r\n      //     console.log(\"Server Error:\", response.data)\r\n      //   const results = response.data\r\n      //   this.posts = results.map(post => ({\r\n      //     id: post.id,\r\n      //     name: post.name,\r\n      //     occupation: post.occupation,\r\n      //     email: post.email,\r\n      //     bio: post.bio,\r\n      //     created_at: post.created_at,\r\n      //     updated_at: post.updated_at\r\n         \r\n      //   }))\r\n      // } catch (err) {\r\n      //   if (err.response) {\r\n      //     // client received an error response (5xx, 4xx)\r\n      //     console.log(\"Server Error:\", err)\r\n      //   } else if (err.request) {\r\n      //     // client never received a response, or request never left\r\n      //     console.log(\"Network Error:\", err)\r\n      //   } else {\r\n      //     console.log(\"Client Error:\", err)\r\n      //   }\r\n      // }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchNews()\r\n  },\r\n\r\n}\r\n</script>"],"sourceRoot":"src/views/products"}]}