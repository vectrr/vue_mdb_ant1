{"remainingRequest":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\src\\views\\mainContent.vue?vue&type=template&id=e03c9754&","dependencies":[{"path":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\src\\views\\mainContent.vue","mtime":1630656823480},{"path":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\w\\vue\\New folder\\vue2-main-forefront-Test_2\\vue_mdb_ant\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}